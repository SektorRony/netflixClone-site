{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomelist","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","console","log","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58e252e5.chunk.js","sourcesContent":["const API_KEY = 'f8f01bf1da58290e097eea067eab64f6';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\n- originais da netflix\r\n- recomendado (trending)\r\n- em alta (top rated)\r\n- ação\r\n- comédia\r\n- terror\r\n- romance\r\n- documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) =>{\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n\r\n    getHomelist: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'toprated',\r\n                title: 'Em Alta',\r\n                 items: await basicFetch(`/movie/top_rated?language-pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'action',\r\n                title: 'Ação',\r\n                 items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'comedy',\r\n                title: 'Comédia',\r\n                 items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'horror',\r\n                title: 'Terror',\r\n                 items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'romance',\r\n                title: 'Romance',\r\n                 items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug:'documentary',\r\n                title: 'Documentários',\r\n                 items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n\r\n        ];\r\n    },\r\n\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n\r\n}","import React, {useState} from 'react';\r\nimport './MovieRow.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow = () =>{\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if (x > 0){\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () =>{\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if((window.innerWidth - listW) > x){\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize: 50}}/>\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                    }}>\r\n\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                        <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({ item }) => {\r\n    \r\n    console.log(item);\r\n    let firstDate = new Date(item.first_air_date);\r\n\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name)\r\n    }\r\n\r\n    let description = item.overview;\r\n\r\n    if(description.length > 200){\r\n        description = description.substring(0,200)+'...';\r\n    }\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                        <div className=\"featured--description\">{description}</div>\r\n                        <div className=\"featured--buttons\">\r\n                            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\r\n                            <a href={`list/add/${item.id}`} className=\"featured--mylistbutton\">+ minha lista</a>\r\n                        </div>\r\n                        <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({ black }) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  \n\n  useEffect(() => {\n\n    const loadAll = async () => {\n      // pegando a lista total\n\n      let list = await Tmdb.getHomelist();\n      setMovieList(list);\n\n      // pegando o featured\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1)); //gerando numero aleatório da lista\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n    loadAll();\n\n  }, []);\n\n  useEffect(()=>{\n    \n    const scrollListener = ()=>{\n        if(window.scrollY > 10){\n          setBlackHeader(true);\n        } else{\n          setBlackHeader(false);\n        }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return ()=>{\n      window.removeEventListener('scroll', scrollListener);\n    }\n\n  },[]);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <div>\n            <MovieRow key={key} title={item.title} items={item.items} />\n          </div>\n        ))}\n      </section>\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">♥</span> pela B7Web<br/>\n        Direitos de imagem para Netflix<br/>\n        Dados pegos do site themoviedb.org\n      </footer>\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>       \n  );\n}\n\n/* time do video 2:28:00*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}